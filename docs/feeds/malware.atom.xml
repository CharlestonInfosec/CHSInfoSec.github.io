<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Charleston InfoSec Group - malware</title><link href="http://chsinfosec.org/" rel="alternate"></link><link href="http://chsinfosec.org/feeds/malware.atom.xml" rel="self"></link><id>http://chsinfosec.org/</id><updated>2018-03-30T00:00:00-04:00</updated><entry><title>Reversing py2exe executables</title><link href="http://chsinfosec.org/reversing-py2exe.html" rel="alternate"></link><published>2018-03-30T00:00:00-04:00</published><updated>2018-03-30T00:00:00-04:00</updated><author><name>TJ Nelson</name></author><id>tag:chsinfosec.org,2018-03-30:/reversing-py2exe.html</id><summary type="html">&lt;p&gt;This blog post will discuss how to reverse py2exe malware.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Reversing Python (py2exe) Malware&lt;/h1&gt;
&lt;p&gt;This post will be based on a CHSinfoSec Meetup in March 2018. The Slides from this talk are here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.google.com/presentation/d/1zBMxeLYEnb2uZE-sYf4v-dovIjEyUm0HWmCB26stiBk/edit?usp=sharing"&gt;Reversing Python Malware Slides&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The sample from this example is CannibalRAT (sha256):83d49f14ebb6641f1b813614a40e7df2d200096b8aae198e6298125f47b55b59&lt;/p&gt;
&lt;p&gt;You can download it &lt;a href="https://malshare.com/sample.php?action=detail&amp;amp;hash=fb1a2d0db81979e09128630bc2c82c53"&gt;HERE&lt;/a&gt; &lt;strong&gt;BEWARE THIS IS MALWARE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can also review the original analysis of this sample here: [Talos Intelligence Blog - CannibalRat] (http://blog.talosintelligence.com/2018/02/cannibalrat-targets-brazil.html)&lt;/p&gt;
&lt;p&gt;Below you will find the source code for the scripts used as well as links to videos showing the process.&lt;/p&gt;
&lt;h3&gt;Extract Additional Imports from PE Overlays&lt;/h3&gt;
&lt;p&gt;get_overlay.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pefile&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;pe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pefile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_overlay_data_start_offset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.app&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;[command]&lt;/em&gt; python get_overlay.py &lt;em&gt;&amp;lt;filename&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://asciinema.org/a/jDo4WujW1HiHTAKYkZFdY8T78"&gt;&lt;img alt="asciicast" src="https://asciinema.org/a/jDo4WujW1HiHTAKYkZFdY8T78.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;### Extract resources from PE file using wrestool&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[command]&lt;/em&gt; wrestool -Rax &lt;em&gt;&amp;lt;filename&gt;&lt;/em&gt; -o &lt;em&gt;output_folder&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://asciinema.org/a/171998"&gt;&lt;img alt="asciicast" src="https://asciinema.org/a/171998.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;### Extract main python files from PYTHONSCRIPT&lt;/p&gt;
&lt;p&gt;unpack_pythonscript.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;marshal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;imp&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;==skipping_header==&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;unmarshal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;marshal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unmarshal&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.pyc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_magic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;marshal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unmarshal&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;==done==&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;[command]&lt;/em&gt; python unpack_pythonscript.py &lt;em&gt;&amp;lt;filename&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://asciinema.org/a/172001"&gt;&lt;img alt="asciicast" src="https://asciinema.org/a/172001.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Decompile .pyc files with uncompyle6&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;[command]&lt;/em&gt; uncompyle6 &lt;em&gt;&amp;lt;filename&gt;&lt;/em&gt; &gt; &lt;em&gt;&amp;lt;filename&gt;.py&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://asciinema.org/a/171997"&gt;&lt;img alt="asciicast" src="https://asciinema.org/a/171997.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Putting it all together&lt;/h2&gt;
&lt;p&gt;This is the process of decompiling Cannibal RAT and extracting the C2 information from the Python source code.
WARNING: Those urls are dangerous and should not be navigated to.&lt;/p&gt;
&lt;p&gt;For more information take a look at http://blog.talosintelligence.com/2018/02/cannibalrat-targets-brazil.html&lt;/p&gt;
&lt;p&gt;&lt;a href="https://asciinema.org/a/172072"&gt;&lt;img alt="asciicast" src="https://asciinema.org/a/172072.png"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="malware"></category><category term="reverse_engineering"></category><category term="python"></category></entry><entry><title>Quick Malware Triage</title><link href="http://chsinfosec.org/quick-malware-triage.html" rel="alternate"></link><published>2017-07-08T09:00:00-04:00</published><updated>2017-07-08T09:39:00-04:00</updated><author><name>TJ Nelson</name></author><id>tag:chsinfosec.org,2017-07-08:/quick-malware-triage.html</id><summary type="html">&lt;p&gt;A short checklist to identify/classify most malware&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The Methodology&lt;/h2&gt;
&lt;p&gt;If you are in any I.T. Security position you will inevitably encounter malware, sweet... sweet... malware. Most of the time it is not nessesary to do deep dive analysis or reverse engineering to get actionable information. Typically, you can get most of the nessesary information from a quick triage session. In most cases you will want to identify the malware type and it's functionality. Below we will go over quick triage tasks to get this information leveraging
open source resources.&lt;/p&gt;
&lt;h2&gt;Start easy: scan with anti-virus software&lt;/h2&gt;
&lt;p&gt;This may seem obvious but the first thing you should do when looking at a sample would be to scan it with anti-virus software. This will give you an idea of the rarity of the malware sample, if anti-virus detects it, your sample could be common. Knowing how common of a sample you are dealing with can greatly change the way you will look at the malware.&lt;/p&gt;
&lt;p&gt;Scan the malware with two different anti-virus clients and see if they detect the sample. If one or both clients detect this sample you will usually see a malware type of family name the sample can be associated with. Below are examples family names you might see: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Trojan.Zbot
Backdoor:W32/Pushbot.gen!A
Trojan-Downloader:W32/Mebroot.gen!B
Trojan:W32/Daonol.gen!C
VBS:Agent-BRE&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can take this family name or malware type and search for it online, which will usually get you additional information. Start with the anti-virus vendors site then google it to see what comes up.&lt;/p&gt;
&lt;h2&gt;Get the skinny: capture basic static data&lt;/h2&gt;
&lt;p&gt;You will want to collect some baseline information about the sample to help you identify it's type and possible functionality.&lt;/p&gt;
&lt;h3&gt;Get the static info&lt;/h3&gt;
&lt;h4&gt;Calculate file checksum&lt;/h4&gt;
&lt;p&gt;File checksums (also called hashes) are like fingerprints for files, they are mostly used for file verfication and integrity. Every bit (literally, the 1's and 0's) of a file are entered in an algorithm (hash function) to create the checksum. Checksums come many flavors but MD5, SHA1 and SHA256 are the most common. Many tools are available online to calculate a checksum for a specific file. These are examples of checksums:
&lt;em&gt; a2f019aa45f59786bd2676bcd726dfa0 (MD5)
&lt;/em&gt; b5acd6d87789e129fdc08a63014a98e4d8a8c36f (SHA1)
* 19442752400b14225610858b2c18aef563dab03b0fd493f14955fbf1119cb900 (SHA256)&lt;/p&gt;
&lt;p&gt;All of these checksums were calculated from the same file. Because the same data is entered into different hash functions you end up with different values.&lt;/p&gt;
&lt;h4&gt;Look at the plaintext strings&lt;/h4&gt;
&lt;p&gt;Often malware samples contain plain text strings embedded in its data sections for values used by the malware sample. In this you can typically find things like:
&lt;em&gt; URLs
&lt;/em&gt; IP Addresses
&lt;em&gt; Filenames
&lt;/em&gt; Email Addresses
&lt;em&gt; Commands
&lt;/em&gt; Window Dialogs&lt;/p&gt;
&lt;p&gt;Using the linux command &lt;strong&gt;strings -a &amp;lt;filename&gt;&lt;/strong&gt; you can output the strings of a file. On Windows you can use a variety of tools to view strings such as BinText or PEStudio. Use these found string values to gain context about the malware sample.&lt;/p&gt;
&lt;h3&gt;Scan with Yara&lt;/h3&gt;
&lt;p&gt;Yara is a tool used to help classify malware samples. With YARA you can create descriptions (signatures) of malware families (or whatever you want to describe) based on textual or binary patterns. The great thing is that there are many signatures already created that you can use. One good source of these signature sets (called Yara rules) is https://github.com/Yara-Rules/rules. Running this tool with a ruleset against your malware sample will help you identify the family and
type.&lt;/p&gt;
&lt;h2&gt;Ask the community: search for OSINT&lt;/h2&gt;
&lt;h3&gt;Search MD5/SHA1/SHA256&lt;/h3&gt;
&lt;p&gt;You can take the checksum of the sample and do simple google searches to see if it turns up anywhere. With common samples you will find a ton of links with information about the sample you are analyzing which can include but is not limited to:
&lt;em&gt; Sandbox executions (Links to Malwr, Hybrid Analysis and other online malware analyzers. See Run It! section)
&lt;/em&gt; Reputation information from VirusTotal, Threat Expert and other sites
&lt;em&gt; Blog posts about the sample
&lt;/em&gt; References in forums and mailing lists&lt;/p&gt;
&lt;p&gt;Take a look at these sources but remember all information is not created equal so depending on the source the information you get might be wrong or slightly off.&lt;/p&gt;
&lt;h3&gt;Upload to Virustotal&lt;/h3&gt;
&lt;p&gt;If you dont get alot of information back from searching the checksums you could also upload the sample to virustotal (&lt;a href="http://www.virustotal.com"&gt;www.virustotal.com&lt;/a&gt;) to check it against a large set of anti-virus products. This often gives you an idea of the type of malware you are dealing with. In addition to the anti-virus output you get static analysis information at your disposal. &lt;/p&gt;
&lt;h2&gt;Run it!: Submit to a Sandbox&lt;/h2&gt;
&lt;p&gt;Lastly one of my favorite tools in the toolbox for malware analysis is the sandbox. Running the sample in a safe and isolated environment to observe its behavior is the best way to figure out how it works. Although there can be many challenges to getting a sample to run to correctly in a sandbox (ironically enough). When it does run the information you get is extremely helpful. Below are some of the online sandbox tools that are free to use for analysis.&lt;/p&gt;
&lt;p&gt;DISCLAIMER: I should warn you once you upload the sample to a public sandbox, it is in public domain. So external parties can see the file you uploaded, this could be bad if you are uploading samples that may contain personal/company information. Caution should always be exercised when uploading anything malicious to the internet.&lt;/p&gt;
&lt;h3&gt;Malwr&lt;/h3&gt;
&lt;p&gt;Malwr (&lt;a href="http://malwr.com"&gt;www.malwr.com&lt;/a&gt;) is a free service based on the people who developed Cuckoo, an open source sandboxing tool (it runs on Cuckoo). It also has an option to do private analysis, so the sample is not shared.&lt;/p&gt;
&lt;h3&gt;Hybrid Analysis&lt;/h3&gt;
&lt;p&gt;Hyrid Analysis (&lt;a href="http://hybrid-analysis.com"&gt;www.hybrid-analysis.com&lt;/a&gt;)is another option for free online sandbox analysis.&lt;/p&gt;
&lt;h3&gt;Others&lt;/h3&gt;
&lt;p&gt;There are other sandboxes that are available online that offer a variety of features and platform support. Check out this link for more options: &lt;a href="https://zeltser.com/automated-malware-analysis/"&gt;https://zeltser.com/automated-malware-analysis/&lt;/a&gt; for a good list of places to checkout. You can also run your own locally (Cuckoo) which could offer the most privacy in regards to your data.&lt;/p&gt;
&lt;h3&gt;Send the PCAPs back through&lt;/h3&gt;
&lt;p&gt;Sandbox tools often provide output like dropped files, memory dumps and PCaps. You can run PCaps you get from sandboxing against an IDS such as snort or suricata to see what alerts fire. Sometimes you will get alerts that help identify the malware family of the sample. Example of this would look like:
* ETPRO TROJAN Win32/Gamarue.C Checkin 4 (A Network Trojan was Detected) [2806085]&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is a good starting point for analysis of a malware sample, the tasks dont need to be executed in a specific order. You will find that over time you will get a feel of what tasks will produce the most information. Good Luck!&lt;/p&gt;</content><category term="malware"></category><category term="triage"></category></entry></feed>