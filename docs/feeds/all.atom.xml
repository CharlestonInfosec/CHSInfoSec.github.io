<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Charleston InfoSec Group</title><link href="http://chsinfosec.org/" rel="alternate"></link><link href="http://chsinfosec.org/feeds/all.atom.xml" rel="self"></link><id>http://chsinfosec.org/</id><updated>2018-03-30T00:00:00-04:00</updated><entry><title>Reversing py2exe executables</title><link href="http://chsinfosec.org/reversing-py2exe.html" rel="alternate"></link><published>2018-03-30T00:00:00-04:00</published><updated>2018-03-30T00:00:00-04:00</updated><author><name>TJ Nelson</name></author><id>tag:chsinfosec.org,2018-03-30:/reversing-py2exe.html</id><summary type="html">&lt;p&gt;This blog post will discuss how to reverse py2exe malware.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Reversing Python (py2exe) Malware&lt;/h1&gt;
&lt;p&gt;This post will be based on a CHSinfoSec Meetup in March 2018. The Slides from this talk are here.
https://docs.google.com/presentation/d/1zBMxeLYEnb2uZE-sYf4v-dovIjEyUm0HWmCB26stiBk/edit?usp=sharing&lt;/p&gt;
&lt;p&gt;Below you will find the source code for the scripts used as well as links to videos showing the process.&lt;/p&gt;
&lt;h3&gt;Extract Additional Imports from PE Overlays&lt;/h3&gt;
&lt;p&gt;get_overlay.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pefile&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;pe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pefile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_overlay_data_start_offset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.app&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;[command]&lt;/em&gt; python get_overlay.py &lt;em&gt;&amp;lt;filename&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://asciinema.org/a/jDo4WujW1HiHTAKYkZFdY8T78"&gt;&lt;img alt="asciicast" src="https://asciinema.org/a/jDo4WujW1HiHTAKYkZFdY8T78.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;### Extract resources from PE file using wrestool&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[command]&lt;/em&gt; wrestool -Rax &lt;em&gt;&amp;lt;filename&gt;&lt;/em&gt; -o &lt;em&gt;output_folder&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://asciinema.org/a/171998"&gt;&lt;img alt="asciicast" src="https://asciinema.org/a/171998.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;### Extract main python files from PYTHONSCRIPT&lt;/p&gt;
&lt;p&gt;unpack_pythonscript.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;marshal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;imp&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;==skipping_header==&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;unmarshal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;marshal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unmarshal&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.pyc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_magic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;marshal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unmarshal&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;==done==&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;[command]&lt;/em&gt; python unpack_pythonscript.py &lt;em&gt;&amp;lt;filename&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://asciinema.org/a/172001"&gt;&lt;img alt="asciicast" src="https://asciinema.org/a/172001.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Decompile .pyc files with uncompyle6&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;[command]&lt;/em&gt; uncompyle6 &lt;em&gt;&amp;lt;filename&gt;&lt;/em&gt; &gt; &lt;em&gt;&amp;lt;filename&gt;.py&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://asciinema.org/a/171997"&gt;&lt;img alt="asciicast" src="https://asciinema.org/a/171997.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Putting it all together&lt;/h2&gt;
&lt;p&gt;This is the process of decompiling Cannibal RAT and extracting the C2 information from the Python source code.
WARNING: Those urls are dangerous and should not be navigated to.&lt;/p&gt;
&lt;p&gt;For more information take a look at http://blog.talosintelligence.com/2018/02/cannibalrat-targets-brazil.html&lt;/p&gt;
&lt;p&gt;&lt;a href="https://asciinema.org/a/172072"&gt;&lt;img alt="asciicast" src="https://asciinema.org/a/172072.png"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="malware"></category><category term="reverse_engineering"></category><category term="python"></category></entry><entry><title>Hacker Math</title><link href="http://chsinfosec.org/hacker-math-intro.html" rel="alternate"></link><published>2017-09-24T08:00:00-04:00</published><updated>2017-09-24T08:00:00-04:00</updated><author><name>TJ Nelson</name></author><id>tag:chsinfosec.org,2017-09-24:/hacker-math-intro.html</id><summary type="html">&lt;p&gt;Introductions to mathematics that facilitates computers and hacking&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Hacker Math&lt;/h1&gt;
&lt;p&gt;Numbers are important in our world in fact number systems are the base of reason for alot of things around us. What is your age? When is your birthday? What's your phone number? All of the answers to those questions are related to numbers. Even when you are reading a book or a blog post like this you are tracking words, pages and sentences all in a numerical way. Number systems appear in many ways throughout our lives, the one you are most familiar with is probably Base-10 which
is the most common 1..10,11,12...100. This system. also called Decimal, most likely derived from the amount of fingers on an average human, 10; who hasn't counted something with their fingers. As for computers at the lowest level uses Base-2, which is usually referred to as binary, the system based out of 1's and 0's. So you are probably wondering if there are any other base systems, the answer is yes. You can make a number system with any base you want but these are the
most common ones:
&lt;em&gt; Base-2 (Binary)
&lt;/em&gt; Base-8 (Decimal)
* Base-16 (Hexadecimal)&lt;/p&gt;
&lt;p&gt;So what are bases you ask? Well that is a little beyond what I want to get into during this article but basically a Base number is the number of units counted before the unit is carried over as a multiple. For example in Base-10 you will never see a number higher than 9 in a Base-10 number as the last digit. So using that concept in Base-2 you will never a value higher than 1 as the last digit. So to represent a number like 3 you need to carry over the 1 so a second digit and you
will get the number 11. Bases typically relate to a particular unit of measurement, for decimal it is the 10 fingers on both hands. As for Base-2, or Binary, it is based on the fact that computers are basically a large complex relay of switches that have 2 values, off or on. Off being 0 and on being 1, once you think about it in that respect it starts making sense.  &lt;/p&gt;
&lt;p&gt;Now to throw a curve ball in the mix lets talk about Base-16 which is called Hexadecimal. This has last digit values that reach but dont surpass 15. Now 15 is already 2 digits so taking our above examples it would look like this counts up&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15...time to carry over... 1:01?
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;that doesn't look very good because the double digit numbers and the carried values can be confused. So mathmaticians came up with another way to represent numbers 10-15 using the alphabet. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;10 = A
11 = B
12 = C
13 = D
14 = E
15 = F
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;that means the count 1-16 looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F, 10 (this may be confusing but in hexidecimal the number 10 = the value 16)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Dealing with binary (Base-2)&lt;/h2&gt;
&lt;p&gt;Normal counting is in decimal (Base-10) meaning a digit can hold 10 numbers 0-9 where as computers use binary, or Base-2, where digits can hold 2 numbers 0-1. So counting in would look like this:&lt;/p&gt;
&lt;p&gt;0 = 000&lt;/p&gt;
&lt;p&gt;1 = 001&lt;/p&gt;
&lt;p&gt;2 = 010&lt;/p&gt;
&lt;p&gt;3 = 011&lt;/p&gt;
&lt;p&gt;4 = 100&lt;/p&gt;
&lt;p&gt;5 = 101&lt;/p&gt;
&lt;p&gt;If we wanted to find out what 10 looks like in binary we do the math out like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So the value for 10 in binary is 1010 = ( 8x1 + 2x1 ) = 10&lt;/p&gt;
&lt;h2&gt;The Other bases (Base-8 and Base-16)&lt;/h2&gt;
&lt;p&gt;Base-8 also known as octal and Base-16 also known as hexadecimal.&lt;/p&gt;
&lt;h3&gt;Octal&lt;/h3&gt;
&lt;p&gt;&lt;img alt="octal_chart" src="http://www.cplusplus.com/doc/hex/base_octal.gif"&gt;&lt;/p&gt;
&lt;h3&gt;Hexadecimal&lt;/h3&gt;
&lt;p&gt;&lt;img alt="hex_chart" src="http://www.cplusplus.com/doc/hex/base_hexadecimal.gif"&gt;&lt;/p&gt;
&lt;h2&gt;Bit Shifting&lt;/h2&gt;
&lt;h3&gt;bits&lt;/h3&gt;
&lt;p&gt;In computing and telecommunications, a unit of information is the capacity of some standard data storage system or communication channel, used to measure the capacities of other systems and channels. In information theory, units of information are also used to measure the entropy of random variables and information contained in messages.&lt;/p&gt;
&lt;p&gt;The most commonly used units of data storage capacity are the bit, the capacity of a system that has only two states, and the byte (or octet), which is equivalent to eight bits.&lt;/p&gt;
&lt;h3&gt;byte&lt;/h3&gt;
&lt;p&gt;Historically, a byte was the number of bits used to encode a character of text in the computer, which depended on computer hardware architecture; but today it almost always means 8 bits – that is, an octet. 
A byte can represent 256 (28) distinct values, such as the integers 0 to 255, or −128 to 127.&lt;/p&gt;
&lt;p&gt;&lt;img alt="bytes_chart" src="http://wiki.schoolcoders.com/img/gcse/data-representation/binary/byte.png"&gt;&lt;/p&gt;
&lt;h3&gt;word&lt;/h3&gt;
&lt;p&gt;Computers usually manipulate bits in groups of a fixed size, conventionally called words. The number of bits in a word is usually defined by the size of the registers in the computer's CPU, or by the number of data bits that are fetched from its main memory in a single operation. In the IA-32 architecture more commonly known as x86-32, a word is 16 bits.&lt;/p&gt;
&lt;p&gt;&lt;img alt="word_chart" src="http://www.alenspage.net/Byte.gif"&gt;&lt;/p&gt;
&lt;h3&gt;dword&lt;/h3&gt;
&lt;p&gt;DWord stands for double word which as you guess is the same as a word but 32 bits instead on x86-32.&lt;/p&gt;
&lt;p&gt;&lt;img alt="dword_chart" src="http://www.datasheetarchive.com/files/intel/design/intarch/techinfo/pentium/graphics/dataty~1.gif"&gt;&lt;/p&gt;
&lt;h2&gt;Primitive Data Structures&lt;/h2&gt;
&lt;p&gt;Data types are used within type systems, which offer various ways of defining, implementing and using them. Different type systems ensure varying degrees of type safety.&lt;/p&gt;
&lt;p&gt;A computer’s way of saying this is what I expect this to be.&lt;/p&gt;
&lt;h3&gt;Integers&lt;/h3&gt;
&lt;p&gt;Represents a finite subset of mathematical numbers (0, 1, 2, …..)
Comes in many flavors
&lt;em&gt; short / long
&lt;/em&gt; signed/unsigned
Example:
(hex) FF would represent 255
(binary) 11111111 would represent 255&lt;/p&gt;
&lt;h3&gt;Boolean&lt;/h3&gt;
&lt;p&gt;This is a data type that denotes: (True/False), (On/Off) , (0,1)&lt;/p&gt;
&lt;p&gt;1 = True and 0 = False&lt;/p&gt;
&lt;p&gt;The Boolean data type is primarily associated with conditional statements, which allow different actions and change control flow depending on whether a programmer-specified Boolean condition evaluates to true or false.&lt;/p&gt;
&lt;p&gt;&lt;img alt="int" src="https://www3.ntu.edu.sg/home/ehchua/programming/java/images/DataRep_SignMagnitude.png"&gt;&lt;/p&gt;
&lt;h3&gt;Characters&lt;/h3&gt;
&lt;p&gt;A character is a unit of information that roughly corresponds to a character in the alphabet or symbol in a text language.&lt;/p&gt;
&lt;p&gt;Characters can be represented in many ways but the usual methods are Unicode (UTF-8, UTF-16) and ASCII. &lt;/p&gt;
&lt;p&gt;All of which use different sizes and map numbers to different characters.&lt;/p&gt;
&lt;p&gt;&lt;img alt="char" src="http://ecomputernotes.com/images/Character-Data-Types.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Unicode (UTF-8 and UTF-16)&lt;/h3&gt;
&lt;p&gt;Shifting from UTF-8 -&amp;gt; UTF-16&lt;/p&gt;
&lt;p&gt;UTF-8 = 1 byte  while UTF-16 = 2 Bytes&lt;/p&gt;
&lt;p&gt;As you can see 01000001 (41) is a capital A in UTF-8 and in UTF-16&lt;/p&gt;
&lt;p&gt;The reason for more bits is to handle more characters without having to add more encodings.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Unicode" src="https://i.stack.imgur.com/6C0C6.png"&gt;&lt;/p&gt;
&lt;h3&gt;ASCII&lt;/h3&gt;
&lt;p&gt;Abbreviated from American Standard Code for Information Interchange, is a character encoding standard. ASCII codes represent text in computers, telecommunications equipment, and other devices. Most modern character-encoding schemes are based on ASCII, although they support many additional characters. And it Supports the least Chars.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ASCII" src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/82/US-ASCII_code_chart.png/361px-US-ASCII_code_chart.png"&gt;&lt;/p&gt;
&lt;h3&gt;Floating Point Numbers&lt;/h3&gt;
&lt;p&gt;Floating-point arithmetic is arithmetic using formulaic representation of real numbers as an approximation so as to support a trade-off between range and precision.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Float" src="https://upload.wikimedia.org/wikipedia/commons/thumb/e/e8/IEEE_754_Single_Floating_Point_Format.svg/618px-IEEE_754_Single_Floating_Point_Format.svg.png"&gt;&lt;/p&gt;
&lt;h3&gt;Alphanumeric Strings&lt;/h3&gt;
&lt;p&gt;A string is traditionally a sequence of characters, is often implemented as an array data structure of bytes (or words) that stores a sequence of elements, typically characters, using some character encoding (hint: unicode and ascii).&lt;/p&gt;
&lt;p&gt;Usually are null-terminated meaning the end of the string is denoted by a special terminating character, null byte (NULL), which is 00000000 (all zeroed out byte).&lt;/p&gt;
&lt;p&gt;&lt;img alt="strings" src="http://www.gammon.com.au/images/Arduino/C-string%20example.png"&gt;&lt;/p&gt;
&lt;h3&gt;Reference&lt;/h3&gt;
&lt;p&gt;A reference is a value that enables a program to indirectly access a particular location in the computer's memory or in some other storage device.&lt;/p&gt;
&lt;p&gt;Usually starting at a base address like 0x00000000 and moving up by the size of the data unit. &lt;/p&gt;
&lt;p&gt;In the above example the ‘E’ would be at 0x00000002 that is 2 byte away from the offset (each char is 2 bytes, so we could assume they might be using UTF-16).&lt;/p&gt;
&lt;p&gt;&lt;img alt="reference" src="https://i-msdn.sec.s-msft.com/dynimg/IC15540.gif"&gt;&lt;/p&gt;</content><category term="fundementals"></category><category term="math"></category><category term="programming"></category></entry><entry><title>Quick Malware Triage</title><link href="http://chsinfosec.org/quick-malware-triage.html" rel="alternate"></link><published>2017-07-08T09:00:00-04:00</published><updated>2017-07-08T09:39:00-04:00</updated><author><name>TJ Nelson</name></author><id>tag:chsinfosec.org,2017-07-08:/quick-malware-triage.html</id><summary type="html">&lt;p&gt;A short checklist to identify/classify most malware&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The Methodology&lt;/h2&gt;
&lt;p&gt;If you are in any I.T. Security position you will inevitably encounter malware, sweet... sweet... malware. Most of the time it is not nessesary to do deep dive analysis or reverse engineering to get actionable information. Typically, you can get most of the nessesary information from a quick triage session. In most cases you will want to identify the malware type and it's functionality. Below we will go over quick triage tasks to get this information leveraging
open source resources.&lt;/p&gt;
&lt;h2&gt;Start easy: scan with anti-virus software&lt;/h2&gt;
&lt;p&gt;This may seem obvious but the first thing you should do when looking at a sample would be to scan it with anti-virus software. This will give you an idea of the rarity of the malware sample, if anti-virus detects it, your sample could be common. Knowing how common of a sample you are dealing with can greatly change the way you will look at the malware.&lt;/p&gt;
&lt;p&gt;Scan the malware with two different anti-virus clients and see if they detect the sample. If one or both clients detect this sample you will usually see a malware type of family name the sample can be associated with. Below are examples family names you might see: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Trojan.Zbot
Backdoor:W32/Pushbot.gen!A
Trojan-Downloader:W32/Mebroot.gen!B
Trojan:W32/Daonol.gen!C
VBS:Agent-BRE&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can take this family name or malware type and search for it online, which will usually get you additional information. Start with the anti-virus vendors site then google it to see what comes up.&lt;/p&gt;
&lt;h2&gt;Get the skinny: capture basic static data&lt;/h2&gt;
&lt;p&gt;You will want to collect some baseline information about the sample to help you identify it's type and possible functionality.&lt;/p&gt;
&lt;h3&gt;Get the static info&lt;/h3&gt;
&lt;h4&gt;Calculate file checksum&lt;/h4&gt;
&lt;p&gt;File checksums (also called hashes) are like fingerprints for files, they are mostly used for file verfication and integrity. Every bit (literally, the 1's and 0's) of a file are entered in an algorithm (hash function) to create the checksum. Checksums come many flavors but MD5, SHA1 and SHA256 are the most common. Many tools are available online to calculate a checksum for a specific file. These are examples of checksums:
&lt;em&gt; a2f019aa45f59786bd2676bcd726dfa0 (MD5)
&lt;/em&gt; b5acd6d87789e129fdc08a63014a98e4d8a8c36f (SHA1)
* 19442752400b14225610858b2c18aef563dab03b0fd493f14955fbf1119cb900 (SHA256)&lt;/p&gt;
&lt;p&gt;All of these checksums were calculated from the same file. Because the same data is entered into different hash functions you end up with different values.&lt;/p&gt;
&lt;h4&gt;Look at the plaintext strings&lt;/h4&gt;
&lt;p&gt;Often malware samples contain plain text strings embedded in its data sections for values used by the malware sample. In this you can typically find things like:
&lt;em&gt; URLs
&lt;/em&gt; IP Addresses
&lt;em&gt; Filenames
&lt;/em&gt; Email Addresses
&lt;em&gt; Commands
&lt;/em&gt; Window Dialogs&lt;/p&gt;
&lt;p&gt;Using the linux command &lt;strong&gt;strings -a &amp;lt;filename&gt;&lt;/strong&gt; you can output the strings of a file. On Windows you can use a variety of tools to view strings such as BinText or PEStudio. Use these found string values to gain context about the malware sample.&lt;/p&gt;
&lt;h3&gt;Scan with Yara&lt;/h3&gt;
&lt;p&gt;Yara is a tool used to help classify malware samples. With YARA you can create descriptions (signatures) of malware families (or whatever you want to describe) based on textual or binary patterns. The great thing is that there are many signatures already created that you can use. One good source of these signature sets (called Yara rules) is https://github.com/Yara-Rules/rules. Running this tool with a ruleset against your malware sample will help you identify the family and
type.&lt;/p&gt;
&lt;h2&gt;Ask the community: search for OSINT&lt;/h2&gt;
&lt;h3&gt;Search MD5/SHA1/SHA256&lt;/h3&gt;
&lt;p&gt;You can take the checksum of the sample and do simple google searches to see if it turns up anywhere. With common samples you will find a ton of links with information about the sample you are analyzing which can include but is not limited to:
&lt;em&gt; Sandbox executions (Links to Malwr, Hybrid Analysis and other online malware analyzers. See Run It! section)
&lt;/em&gt; Reputation information from VirusTotal, Threat Expert and other sites
&lt;em&gt; Blog posts about the sample
&lt;/em&gt; References in forums and mailing lists&lt;/p&gt;
&lt;p&gt;Take a look at these sources but remember all information is not created equal so depending on the source the information you get might be wrong or slightly off.&lt;/p&gt;
&lt;h3&gt;Upload to Virustotal&lt;/h3&gt;
&lt;p&gt;If you dont get alot of information back from searching the checksums you could also upload the sample to virustotal (&lt;a href="http://www.virustotal.com"&gt;www.virustotal.com&lt;/a&gt;) to check it against a large set of anti-virus products. This often gives you an idea of the type of malware you are dealing with. In addition to the anti-virus output you get static analysis information at your disposal. &lt;/p&gt;
&lt;h2&gt;Run it!: Submit to a Sandbox&lt;/h2&gt;
&lt;p&gt;Lastly one of my favorite tools in the toolbox for malware analysis is the sandbox. Running the sample in a safe and isolated environment to observe its behavior is the best way to figure out how it works. Although there can be many challenges to getting a sample to run to correctly in a sandbox (ironically enough). When it does run the information you get is extremely helpful. Below are some of the online sandbox tools that are free to use for analysis.&lt;/p&gt;
&lt;p&gt;DISCLAIMER: I should warn you once you upload the sample to a public sandbox, it is in public domain. So external parties can see the file you uploaded, this could be bad if you are uploading samples that may contain personal/company information. Caution should always be exercised when uploading anything malicious to the internet.&lt;/p&gt;
&lt;h3&gt;Malwr&lt;/h3&gt;
&lt;p&gt;Malwr (&lt;a href="http://malwr.com"&gt;www.malwr.com&lt;/a&gt;) is a free service based on the people who developed Cuckoo, an open source sandboxing tool (it runs on Cuckoo). It also has an option to do private analysis, so the sample is not shared.&lt;/p&gt;
&lt;h3&gt;Hybrid Analysis&lt;/h3&gt;
&lt;p&gt;Hyrid Analysis (&lt;a href="http://hybrid-analysis.com"&gt;www.hybrid-analysis.com&lt;/a&gt;)is another option for free online sandbox analysis.&lt;/p&gt;
&lt;h3&gt;Others&lt;/h3&gt;
&lt;p&gt;There are other sandboxes that are available online that offer a variety of features and platform support. Check out this link for more options: &lt;a href="https://zeltser.com/automated-malware-analysis/"&gt;https://zeltser.com/automated-malware-analysis/&lt;/a&gt; for a good list of places to checkout. You can also run your own locally (Cuckoo) which could offer the most privacy in regards to your data.&lt;/p&gt;
&lt;h3&gt;Send the PCAPs back through&lt;/h3&gt;
&lt;p&gt;Sandbox tools often provide output like dropped files, memory dumps and PCaps. You can run PCaps you get from sandboxing against an IDS such as snort or suricata to see what alerts fire. Sometimes you will get alerts that help identify the malware family of the sample. Example of this would look like:
* ETPRO TROJAN Win32/Gamarue.C Checkin 4 (A Network Trojan was Detected) [2806085]&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is a good starting point for analysis of a malware sample, the tasks dont need to be executed in a specific order. You will find that over time you will get a feel of what tasks will produce the most information. Good Luck!&lt;/p&gt;</content><category term="malware"></category><category term="triage"></category></entry></feed>